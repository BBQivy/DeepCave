public class Edge implements Comparable<Edge>{
    
    private final int v,w;
    private final double weight;
    
    public Edge(int v, int w, double weight){
        this.v=v;
        this.w=w;
        this.weight=weight;
    }
    
    public int either(){
        return v;
    }
    
    public int or(int vertex){
        if(vertex==v)return w;
        else return v;
    }
    
    public int compareTo(Edge that){
        if(this.weight<that.weight)return -1;
        else if (this.weight>that.weight)return 1;
        else return 0;
    }
}

public class EdgeWeightedGraph{
    private final int v;
    private final Bag<Edge>[]adj;
    
    public EdgeWeightedGraph(int V){
        thi.v=V;
        adj=(Bag<Edge>[])new Bag[V];
        for(int i<0;i<v;i++){
            adj[i]=new Bag<Edge>();
        }
    }
    
    public void addEdge(Edge e){
        int v=e.either(),w=e.or(v);
        adj[v].add(e);
        adj[w].add(e);
    }
    
    public Iterable<Edge>adj(int v){
        return adj[v];
    }
}
