
public class BinarySearch<Key extends Comparable<Key>,Value> {
	private Key[]keys;
	private Value[]vals;
	private int N;
	public BinarySearch(int capacity) {
		keys=(Key[])new Comparable[capacity];
		vals=(Value[])new Object[capacity];
		
	}
	
    public int size() {
    	return N;
    }
    public boolean isEmpty() { 
    return N==0;
    }
    public int rank(Key key) {
    	if(key==null)throw new IllegalArgumentException("null");
    	int low=0,high=N-1;
    	while(low<=high) {
    		int mid=(low+high)/2;
    		int cmp=key.compareTo(keys[mid]);
    		if(cmp>0)low=mid+1;
    		else if(cmp<0)high=mid-1;
    		else return mid;
    	}
    	return low;
    }
	public Value get(Key key) {
		if(isEmpty())return null;
		int i=rank(key);
		if(i<N&&keys[i].compareTo(key)==0) return vals[i];
		else return null;
	}
    public void delete(Key key) {
    	if(key==null)throw new IllegalArgumentException("null");
    	if(isEmpty())return ;
    	int i=rank(key);
    	if(i==N||keys[i].compareTo(key)!=0)return;
    	for(int j=i;j<N-1;j++) {
    		keys[j]=keys[j+1];
    		vals[j]=vals[j+1];
    		
    	}
    	N--;
    	keys[N]=null;
    	vals[N]=null;
    	
    }
    public void put(Key key,Value val) {
     	if(key==null)throw new IllegalArgumentException("null");
     	if(val==null) {
     		delete(key);
     		return;
     	}
     	int i=rank(key);
     	if(i<N&&keys[i].compareTo(key)==0) {
     		vals[i]=val;
     		return;
     	}
     	for(int j=N;j>i;j--) {
     		keys[j]=keys[j-1];
     		vals[j]=vals[j-1];
     	}
     	keys[i]=key;
     	vals[i]=val;
        N++;
    }
}
